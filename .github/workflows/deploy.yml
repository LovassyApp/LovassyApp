name: Application Stack Deploy
run-name: ${{ github.actor }} is deploying the stack to the production server ðŸš€
on: 'workflow_dispatch'
jobs:
    deploy-backend:
        runs-on: ubuntu-latest
        name: Build and deploy Blueboard
        env:
            ASPNETCORE_ENVIRONMENT: release
        strategy:
            matrix:
                dotnet-version: ['7.0']
        steps:
            - name: Checkout master
              uses: actions/checkout@v3
            - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: ${{ matrix.dotnet-version }}
            - name: Install Blueboard dependencies
              run: dotnet restore -r linux-x64
            - name: Install tools
              run: cd Blueboard && dotnet tool restore
            - name: Build Blueboard
              run: dotnet build --configuration Release
            - name: Bundle migrations
              run: cd Blueboard && dotnet tool run dotnet-ef migrations bundle --output ef-core-migrate && cp ef-core-migrate /bin/Release/${{ matrix.dotnet-version }}/ef-core-migrate
            - name: Install SSH Key
              uses: shimataro/ssh-key-action@v2
              with:
                  key: ${{ secrets.DEPLOY_SSH_KEY }}
                  known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
            - name: Adding Known Hosts
              run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
            - name: Copy deploy script to bin
              run: cp ./Blueboard/post-deploy.sh ./Blueboard/bin/post-deploy.sh
            - name: Deploy with rsync
              run: rsync -avz --ignore-errors ./Blueboard/bin/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/data/app/Blueboard
            - name: Run Blueboard deploy script on server
              if: success()
              run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "bash /data/app/Blueboard/post-deploy.sh"
    deploy-frontend:
        runs-on: ubuntu-latest
        name: Build and deploy Boardlight
        steps:
            - name: Checkout master
              uses: actions/checkout@v3
            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 16
            - name: Install pnpm
              uses: pnpm/action-setup@v2
              id: pnpm-install
              with:
                  version: latest
                  run_install: false
            - name: Get pnpm store directory
              id: pnpm-cache
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
                  - name: Setup pnpm cache
                  uses: actions/cache@v3
                  with:
                    path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
                    key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                    restore-keys: |
                      ${{ runner.os }}-pnpm-store-
            - name: Install Boardlight dependencies
              run: |
                  cd Boardlight
                  pnpm install --no-frozen-lockfile
            - name: Generate Typescript API Client
              run: |
                  cd Boardlight
                  pnpm generate-api-client
            - name: Build Boardlight
              run: |
                  cd Boardlight
                  pnpm build
                  - name: Install SSH Key
                  uses: shimataro/ssh-key-action@v2
                  with:
                      key: ${{ secrets.DEPLOY_SSH_KEY }}
                      known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
            - name: Adding Known Hosts
              run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
            - name: Deploy with rsync
              run: rsync -avz --ignore-errors ./Boardlight/dist/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/data/app/Boardlight
