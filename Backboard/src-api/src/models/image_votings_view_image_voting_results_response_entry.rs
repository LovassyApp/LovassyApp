/*
 * Blueboard
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ImageVotingsViewImageVotingResultsResponseEntry {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "title", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub title: Option<Option<String>>,
    #[serde(rename = "imageUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<Option<String>>,
    #[serde(rename = "choicesCount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub choices_count: Option<Option<i32>>,
    #[serde(rename = "incrementSum", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub increment_sum: Option<Option<i32>>,
    #[serde(rename = "aspects", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub aspects: Option<Option<Vec<crate::models::ImageVotingsViewImageVotingResultsResponseEntryAspect>>>,
}

impl ImageVotingsViewImageVotingResultsResponseEntry {
    pub fn new() -> ImageVotingsViewImageVotingResultsResponseEntry {
        ImageVotingsViewImageVotingResultsResponseEntry {
            id: None,
            title: None,
            image_url: None,
            choices_count: None,
            increment_sum: None,
            aspects: None,
        }
    }
}


