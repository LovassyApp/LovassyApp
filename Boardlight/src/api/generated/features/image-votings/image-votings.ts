/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Blueboard
 * OpenAPI spec version: v4.0.0
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  ImageVotingsIndexImageVotingsResponse,
  GetApiImageVotingsParams,
  ImageVotingsCreateImageVotingResponse,
  ImageVotingsCreateImageVotingRequestBody,
  ImageVotingsViewImageVotingResponse,
  ProblemDetails,
  ImageVotingsUpdateImageVotingRequestBody
} from '../../models'
import { useCustomClient } from '../../../customClient';
import type { ErrorType, BodyType } from '../../../customClient';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


/**
 * Requires verified email; Requires one of the following permissions: ImageVotings.IndexImageVotings, ImageVotings.IndexActiveImageVotings; Requires the following features to be enabled: ImageVotings
 * @summary Get a list of image votings
 */
export const getApiImageVotings = (
    params?: GetApiImageVotingsParams,
 signal?: AbortSignal
) => {
      return useCustomClient<ImageVotingsIndexImageVotingsResponse[]>(
      {url: `/Api/ImageVotings`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiImageVotingsQueryKey = (params?: GetApiImageVotingsParams,) => [`/Api/ImageVotings`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiImageVotingsQueryOptions = <TData = Awaited<ReturnType<typeof getApiImageVotings>>, TError = ErrorType<void>>(params?: GetApiImageVotingsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotings>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotings>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiImageVotingsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiImageVotings>>> = ({ signal }) => getApiImageVotings(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiImageVotingsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiImageVotings>>>
export type GetApiImageVotingsQueryError = ErrorType<void>

/**
 * @summary Get a list of image votings
 */
export const useGetApiImageVotings = <TData = Awaited<ReturnType<typeof getApiImageVotings>>, TError = ErrorType<void>>(
 params?: GetApiImageVotingsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotings>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiImageVotingsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * Requires verified email; Requires one of the following permissions: ImageVotings.CreateImageVoting; Requires the following features to be enabled: ImageVotings
 * @summary Create a new image voting
 */
export const postApiImageVotings = (
    imageVotingsCreateImageVotingRequestBody: BodyType<ImageVotingsCreateImageVotingRequestBody>,
 ) => {
      return useCustomClient<ImageVotingsCreateImageVotingResponse>(
      {url: `/Api/ImageVotings`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: imageVotingsCreateImageVotingRequestBody
    },
      );
    }
  


export const getPostApiImageVotingsMutationOptions = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotings>>, TError,{data: BodyType<ImageVotingsCreateImageVotingRequestBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotings>>, TError,{data: BodyType<ImageVotingsCreateImageVotingRequestBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiImageVotings>>, {data: BodyType<ImageVotingsCreateImageVotingRequestBody>}> = (props) => {
          const {data} = props ?? {};

          return  postApiImageVotings(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiImageVotingsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiImageVotings>>>
    export type PostApiImageVotingsMutationBody = BodyType<ImageVotingsCreateImageVotingRequestBody>
    export type PostApiImageVotingsMutationError = ErrorType<void>

    /**
 * @summary Create a new image voting
 */
export const usePostApiImageVotings = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotings>>, TError,{data: BodyType<ImageVotingsCreateImageVotingRequestBody>}, TContext>, }
) => {
    
      const mutationOptions = getPostApiImageVotingsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Requires verified email; Requires one of the following permissions: ImageVotings.ViewImageVoting, ImageVotings.ViewActiveImageVoting; Requires the following features to be enabled: ImageVotings
 * @summary Get information about an image voting
 */
export const getApiImageVotingsId = (
    id: number,
 signal?: AbortSignal
) => {
      return useCustomClient<ImageVotingsViewImageVotingResponse>(
      {url: `/Api/ImageVotings/${id}`, method: 'get', signal
    },
      );
    }
  

export const getGetApiImageVotingsIdQueryKey = (id: number,) => [`/Api/ImageVotings/${id}`] as const;
  

    
export const getGetApiImageVotingsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiImageVotingsId>>, TError = ErrorType<void | ProblemDetails>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingsId>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingsId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiImageVotingsIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiImageVotingsId>>> = ({ signal }) => getApiImageVotingsId(id, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetApiImageVotingsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiImageVotingsId>>>
export type GetApiImageVotingsIdQueryError = ErrorType<void | ProblemDetails>

/**
 * @summary Get information about an image voting
 */
export const useGetApiImageVotingsId = <TData = Awaited<ReturnType<typeof getApiImageVotingsId>>, TError = ErrorType<void | ProblemDetails>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingsId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiImageVotingsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * Requires verified email; Requires one of the following permissions: ImageVotings.UpdateImageVoting; Requires the following features to be enabled: ImageVotings
 * @summary Update an image voting
 */
export const patchApiImageVotingsId = (
    id: number,
    imageVotingsUpdateImageVotingRequestBody: BodyType<ImageVotingsUpdateImageVotingRequestBody>,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/ImageVotings/${id}`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: imageVotingsUpdateImageVotingRequestBody
    },
      );
    }
  


export const getPatchApiImageVotingsIdMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiImageVotingsId>>, TError,{id: number;data: BodyType<ImageVotingsUpdateImageVotingRequestBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchApiImageVotingsId>>, TError,{id: number;data: BodyType<ImageVotingsUpdateImageVotingRequestBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiImageVotingsId>>, {id: number;data: BodyType<ImageVotingsUpdateImageVotingRequestBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  patchApiImageVotingsId(id,data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PatchApiImageVotingsIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiImageVotingsId>>>
    export type PatchApiImageVotingsIdMutationBody = BodyType<ImageVotingsUpdateImageVotingRequestBody>
    export type PatchApiImageVotingsIdMutationError = ErrorType<ProblemDetails>

    /**
 * @summary Update an image voting
 */
export const usePatchApiImageVotingsId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiImageVotingsId>>, TError,{id: number;data: BodyType<ImageVotingsUpdateImageVotingRequestBody>}, TContext>, }
) => {
    
      const mutationOptions = getPatchApiImageVotingsIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Requires verified email; Requires one of the following permissions: ImageVotings.DeleteImageVoting; Requires the following features to be enabled: ImageVotings
 * @summary Delete an image voting
 */
export const deleteApiImageVotingsId = (
    id: number,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/ImageVotings/${id}`, method: 'delete'
    },
      );
    }
  


export const getDeleteApiImageVotingsIdMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingsId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingsId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiImageVotingsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiImageVotingsId(id,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiImageVotingsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiImageVotingsId>>>
    
    export type DeleteApiImageVotingsIdMutationError = ErrorType<ProblemDetails>

    /**
 * @summary Delete an image voting
 */
export const useDeleteApiImageVotingsId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingsId>>, TError,{id: number}, TContext>, }
) => {
    
      const mutationOptions = getDeleteApiImageVotingsIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    