/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Blueboard
 * OpenAPI spec version: v4.0.0
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  ImageVotingsIndexImageVotingEntriesResponse,
  GetApiImageVotingEntriesParams,
  ImageVotingsCreateImageVotingEntryResponse,
  ProblemDetails,
  ImageVotingsCreateImageVotingEntryRequestBody,
  ImageVotingsViewImageVotingEntryResponse,
  ImageVotingsUpdateImageVotingEntryRequestBody,
  ImageVotingsChooseImageVotingEntryRequestBody,
  ImageVotingsUnchooseImageVotingEntryRequestBody,
  ImageVotingsCreateImageVotingEntryIncrementRequestBody,
  ImageVotingsDeleteImageVotingEntryIncrementRequestBody
} from '../../models'
import { useCustomClient } from '../../../customClient';
import type { ErrorType, BodyType } from '../../../customClient';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


/**
 * Requires verified email; Requires one of the following permissions: ImageVotings.IndexImageVotingEntries, ImageVotings.IndexActiveImageVotingEntries; Requires the following features to be enabled: ImageVotings
 * @summary Get a list of all image voting entries
 */
export const getApiImageVotingEntries = (
    params?: GetApiImageVotingEntriesParams,
 signal?: AbortSignal
) => {
      return useCustomClient<ImageVotingsIndexImageVotingEntriesResponse[]>(
      {url: `/Api/ImageVotingEntries`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiImageVotingEntriesQueryKey = (params?: GetApiImageVotingEntriesParams,) => [`/Api/ImageVotingEntries`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiImageVotingEntriesQueryOptions = <TData = Awaited<ReturnType<typeof getApiImageVotingEntries>>, TError = ErrorType<void>>(params?: GetApiImageVotingEntriesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingEntries>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingEntries>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiImageVotingEntriesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiImageVotingEntries>>> = ({ signal }) => getApiImageVotingEntries(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiImageVotingEntriesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiImageVotingEntries>>>
export type GetApiImageVotingEntriesQueryError = ErrorType<void>

/**
 * @summary Get a list of all image voting entries
 */
export const useGetApiImageVotingEntries = <TData = Awaited<ReturnType<typeof getApiImageVotingEntries>>, TError = ErrorType<void>>(
 params?: GetApiImageVotingEntriesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingEntries>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiImageVotingEntriesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * Requires verified email; Requires one of the following permissions: ImageVotings.ChooseImageVotingEntry, ImageVotings.CreateActiveImageVotingEntry; Requires the following features to be enabled: ImageVotings
 * @summary Create an image voting entry
 */
export const postApiImageVotingEntries = (
    imageVotingsCreateImageVotingEntryRequestBody: BodyType<ImageVotingsCreateImageVotingEntryRequestBody>,
 ) => {
      return useCustomClient<ImageVotingsCreateImageVotingEntryResponse>(
      {url: `/Api/ImageVotingEntries`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: imageVotingsCreateImageVotingEntryRequestBody
    },
      );
    }
  


export const getPostApiImageVotingEntriesMutationOptions = <TError = ErrorType<void | ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntries>>, TError,{data: BodyType<ImageVotingsCreateImageVotingEntryRequestBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntries>>, TError,{data: BodyType<ImageVotingsCreateImageVotingEntryRequestBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiImageVotingEntries>>, {data: BodyType<ImageVotingsCreateImageVotingEntryRequestBody>}> = (props) => {
          const {data} = props ?? {};

          return  postApiImageVotingEntries(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiImageVotingEntriesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiImageVotingEntries>>>
    export type PostApiImageVotingEntriesMutationBody = BodyType<ImageVotingsCreateImageVotingEntryRequestBody>
    export type PostApiImageVotingEntriesMutationError = ErrorType<void | ProblemDetails>

    /**
 * @summary Create an image voting entry
 */
export const usePostApiImageVotingEntries = <TError = ErrorType<void | ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntries>>, TError,{data: BodyType<ImageVotingsCreateImageVotingEntryRequestBody>}, TContext>, }
) => {
    
      const mutationOptions = getPostApiImageVotingEntriesMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Requires verified email; Requires one of the following permissions: ImageVotings.ViewImageVotingEntry, ImageVotings.ViewActiveImageVotingEntry; Requires the following features to be enabled: ImageVotings
 * @summary Get information about an image voting entry
 */
export const getApiImageVotingEntriesId = (
    id: number,
 signal?: AbortSignal
) => {
      return useCustomClient<ImageVotingsViewImageVotingEntryResponse>(
      {url: `/Api/ImageVotingEntries/${id}`, method: 'get', signal
    },
      );
    }
  

export const getGetApiImageVotingEntriesIdQueryKey = (id: number,) => [`/Api/ImageVotingEntries/${id}`] as const;
  

    
export const getGetApiImageVotingEntriesIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiImageVotingEntriesId>>, TError = ErrorType<void | ProblemDetails>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingEntriesId>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingEntriesId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiImageVotingEntriesIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiImageVotingEntriesId>>> = ({ signal }) => getApiImageVotingEntriesId(id, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetApiImageVotingEntriesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiImageVotingEntriesId>>>
export type GetApiImageVotingEntriesIdQueryError = ErrorType<void | ProblemDetails>

/**
 * @summary Get information about an image voting entry
 */
export const useGetApiImageVotingEntriesId = <TData = Awaited<ReturnType<typeof getApiImageVotingEntriesId>>, TError = ErrorType<void | ProblemDetails>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingEntriesId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiImageVotingEntriesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * Requires verified email; Requires one of the following permissions: ImageVotings.UpdateImageVotingEntry, ImageVotings.UpdateOwnImageVotingEntry; Requires the following features to be enabled: ImageVotings
 * @summary Update an image voting entry
 */
export const patchApiImageVotingEntriesId = (
    id: number,
    imageVotingsUpdateImageVotingEntryRequestBody: BodyType<ImageVotingsUpdateImageVotingEntryRequestBody>,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/ImageVotingEntries/${id}`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: imageVotingsUpdateImageVotingEntryRequestBody
    },
      );
    }
  


export const getPatchApiImageVotingEntriesIdMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiImageVotingEntriesId>>, TError,{id: number;data: BodyType<ImageVotingsUpdateImageVotingEntryRequestBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchApiImageVotingEntriesId>>, TError,{id: number;data: BodyType<ImageVotingsUpdateImageVotingEntryRequestBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiImageVotingEntriesId>>, {id: number;data: BodyType<ImageVotingsUpdateImageVotingEntryRequestBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  patchApiImageVotingEntriesId(id,data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PatchApiImageVotingEntriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiImageVotingEntriesId>>>
    export type PatchApiImageVotingEntriesIdMutationBody = BodyType<ImageVotingsUpdateImageVotingEntryRequestBody>
    export type PatchApiImageVotingEntriesIdMutationError = ErrorType<ProblemDetails>

    /**
 * @summary Update an image voting entry
 */
export const usePatchApiImageVotingEntriesId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiImageVotingEntriesId>>, TError,{id: number;data: BodyType<ImageVotingsUpdateImageVotingEntryRequestBody>}, TContext>, }
) => {
    
      const mutationOptions = getPatchApiImageVotingEntriesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Requires verified email; Requires one of the following permissions: ImageVotings.DeleteImageVotingEntry, ImageVotings.DeleteOwnImageVotingEntry; Requires the following features to be enabled: ImageVotings
 * @summary Delete an image voting entry
 */
export const deleteApiImageVotingEntriesId = (
    id: number,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/ImageVotingEntries/${id}`, method: 'delete'
    },
      );
    }
  


export const getDeleteApiImageVotingEntriesIdMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingEntriesId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingEntriesId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiImageVotingEntriesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiImageVotingEntriesId(id,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiImageVotingEntriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiImageVotingEntriesId>>>
    
    export type DeleteApiImageVotingEntriesIdMutationError = ErrorType<ProblemDetails>

    /**
 * @summary Delete an image voting entry
 */
export const useDeleteApiImageVotingEntriesId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingEntriesId>>, TError,{id: number}, TContext>, }
) => {
    
      const mutationOptions = getDeleteApiImageVotingEntriesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Requires verified email; Requires one of the following permissions: ImageVotings.ChooseActiveImageVotingEntry, ImageVotings.ChooseImageVotingEntry; Requires the following features to be enabled: ImageVotings
 * @summary Choose an image voting entry (SingleChoice image votings only)
 */
export const postApiImageVotingEntriesIdChoice = (
    id: number,
    imageVotingsChooseImageVotingEntryRequestBody: BodyType<ImageVotingsChooseImageVotingEntryRequestBody>,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/ImageVotingEntries/${id}/Choice`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: imageVotingsChooseImageVotingEntryRequestBody
    },
      );
    }
  


export const getPostApiImageVotingEntriesIdChoiceMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntriesIdChoice>>, TError,{id: number;data: BodyType<ImageVotingsChooseImageVotingEntryRequestBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntriesIdChoice>>, TError,{id: number;data: BodyType<ImageVotingsChooseImageVotingEntryRequestBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiImageVotingEntriesIdChoice>>, {id: number;data: BodyType<ImageVotingsChooseImageVotingEntryRequestBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  postApiImageVotingEntriesIdChoice(id,data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiImageVotingEntriesIdChoiceMutationResult = NonNullable<Awaited<ReturnType<typeof postApiImageVotingEntriesIdChoice>>>
    export type PostApiImageVotingEntriesIdChoiceMutationBody = BodyType<ImageVotingsChooseImageVotingEntryRequestBody>
    export type PostApiImageVotingEntriesIdChoiceMutationError = ErrorType<ProblemDetails>

    /**
 * @summary Choose an image voting entry (SingleChoice image votings only)
 */
export const usePostApiImageVotingEntriesIdChoice = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntriesIdChoice>>, TError,{id: number;data: BodyType<ImageVotingsChooseImageVotingEntryRequestBody>}, TContext>, }
) => {
    
      const mutationOptions = getPostApiImageVotingEntriesIdChoiceMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Requires verified email; Requires one of the following permissions: ImageVotings.UnchooseActiveImageVotingEntry, ImageVotings.UnchooseImageVotingEntry; Requires the following features to be enabled: ImageVotings
 * @summary Unchoose an image voting entry (SingleChoice image votings only)
 */
export const deleteApiImageVotingEntriesIdChoice = (
    id: number,
    imageVotingsUnchooseImageVotingEntryRequestBody: BodyType<ImageVotingsUnchooseImageVotingEntryRequestBody>,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/ImageVotingEntries/${id}/Choice`, method: 'delete',
      headers: {'Content-Type': 'application/json', },
      data: imageVotingsUnchooseImageVotingEntryRequestBody
    },
      );
    }
  


export const getDeleteApiImageVotingEntriesIdChoiceMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingEntriesIdChoice>>, TError,{id: number;data: BodyType<ImageVotingsUnchooseImageVotingEntryRequestBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingEntriesIdChoice>>, TError,{id: number;data: BodyType<ImageVotingsUnchooseImageVotingEntryRequestBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiImageVotingEntriesIdChoice>>, {id: number;data: BodyType<ImageVotingsUnchooseImageVotingEntryRequestBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  deleteApiImageVotingEntriesIdChoice(id,data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiImageVotingEntriesIdChoiceMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiImageVotingEntriesIdChoice>>>
    export type DeleteApiImageVotingEntriesIdChoiceMutationBody = BodyType<ImageVotingsUnchooseImageVotingEntryRequestBody>
    export type DeleteApiImageVotingEntriesIdChoiceMutationError = ErrorType<ProblemDetails>

    /**
 * @summary Unchoose an image voting entry (SingleChoice image votings only)
 */
export const useDeleteApiImageVotingEntriesIdChoice = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingEntriesIdChoice>>, TError,{id: number;data: BodyType<ImageVotingsUnchooseImageVotingEntryRequestBody>}, TContext>, }
) => {
    
      const mutationOptions = getDeleteApiImageVotingEntriesIdChoiceMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Requires verified email; Requires one of the following permissions: ImageVotings.CreateImageVotingEntryIncrement, ImageVotings.CreateActiveImageVotingEntryIncrement; Requires the following features to be enabled: ImageVotings
 * @summary Increment an image voting entry (Increment image votings only)
 */
export const postApiImageVotingEntriesIdIncrement = (
    id: number,
    imageVotingsCreateImageVotingEntryIncrementRequestBody: BodyType<ImageVotingsCreateImageVotingEntryIncrementRequestBody>,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/ImageVotingEntries/${id}/Increment`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: imageVotingsCreateImageVotingEntryIncrementRequestBody
    },
      );
    }
  


export const getPostApiImageVotingEntriesIdIncrementMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntriesIdIncrement>>, TError,{id: number;data: BodyType<ImageVotingsCreateImageVotingEntryIncrementRequestBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntriesIdIncrement>>, TError,{id: number;data: BodyType<ImageVotingsCreateImageVotingEntryIncrementRequestBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiImageVotingEntriesIdIncrement>>, {id: number;data: BodyType<ImageVotingsCreateImageVotingEntryIncrementRequestBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  postApiImageVotingEntriesIdIncrement(id,data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiImageVotingEntriesIdIncrementMutationResult = NonNullable<Awaited<ReturnType<typeof postApiImageVotingEntriesIdIncrement>>>
    export type PostApiImageVotingEntriesIdIncrementMutationBody = BodyType<ImageVotingsCreateImageVotingEntryIncrementRequestBody>
    export type PostApiImageVotingEntriesIdIncrementMutationError = ErrorType<ProblemDetails>

    /**
 * @summary Increment an image voting entry (Increment image votings only)
 */
export const usePostApiImageVotingEntriesIdIncrement = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntriesIdIncrement>>, TError,{id: number;data: BodyType<ImageVotingsCreateImageVotingEntryIncrementRequestBody>}, TContext>, }
) => {
    
      const mutationOptions = getPostApiImageVotingEntriesIdIncrementMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Requires verified email; Requires one of the following permissions: ImageVotings.DeleteImageVotingEntryIncrement, ImageVotings.DeleteActiveImageVotingEntryIncrement; Requires the following features to be enabled: ImageVotings
 * @summary Delete an image voting entry increment (Increment image votings only)
 */
export const deleteApiImageVotingEntriesIdIncrement = (
    id: number,
    imageVotingsDeleteImageVotingEntryIncrementRequestBody: BodyType<ImageVotingsDeleteImageVotingEntryIncrementRequestBody>,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/ImageVotingEntries/${id}/Increment`, method: 'delete',
      headers: {'Content-Type': 'application/json', },
      data: imageVotingsDeleteImageVotingEntryIncrementRequestBody
    },
      );
    }
  


export const getDeleteApiImageVotingEntriesIdIncrementMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingEntriesIdIncrement>>, TError,{id: number;data: BodyType<ImageVotingsDeleteImageVotingEntryIncrementRequestBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingEntriesIdIncrement>>, TError,{id: number;data: BodyType<ImageVotingsDeleteImageVotingEntryIncrementRequestBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiImageVotingEntriesIdIncrement>>, {id: number;data: BodyType<ImageVotingsDeleteImageVotingEntryIncrementRequestBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  deleteApiImageVotingEntriesIdIncrement(id,data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiImageVotingEntriesIdIncrementMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiImageVotingEntriesIdIncrement>>>
    export type DeleteApiImageVotingEntriesIdIncrementMutationBody = BodyType<ImageVotingsDeleteImageVotingEntryIncrementRequestBody>
    export type DeleteApiImageVotingEntriesIdIncrementMutationError = ErrorType<ProblemDetails>

    /**
 * @summary Delete an image voting entry increment (Increment image votings only)
 */
export const useDeleteApiImageVotingEntriesIdIncrement = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingEntriesIdIncrement>>, TError,{id: number;data: BodyType<ImageVotingsDeleteImageVotingEntryIncrementRequestBody>}, TContext>, }
) => {
    
      const mutationOptions = getDeleteApiImageVotingEntriesIdIncrementMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    