/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Blueboard
 * OpenAPI spec version: v4.0.0
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  ImageVotingsViewImageVotingEntryResponse,
  ProblemDetails,
  ImageVotingsUpdateImageVotingEntryRequestBody,
  ImageVotingsIndexImageVotingEntriesResponse,
  GetApiImageVotingEntriesParams,
  ImageVotingsCreateImageVotingEntryResponse,
  ImageVotingsCreateImageVotingEntryRequestBody,
  ImageVotingsChooseImageVotingEntryRequestBody,
  ImageVotingsUnchooseImageVotingEntryRequestBody,
  ImageVotingsIndexImageVotingEntryImagesResponse,
  GetApiImageVotingEntriesImageVotingIdImagesParams,
  ImageVotingsUploadImageVotingEntryImageResponse,
  PostApiImageVotingEntriesImageVotingIdImagesBody
} from '../../models'
import { useCustomClient } from '../../../customClient';
import type { ErrorType, BodyType } from '../../../customClient';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


/**
 * Requires verified email; Requires one of the following permissions: ImageVotings.ViewImageVotingEntry, ImageVotings.ViewActiveImageVotingEntry; Requires the following features to be enabled: ImageVotings
 * @summary Get information about an image voting entry
 */
export const getApiImageVotingEntriesId = (
    id: number,
 signal?: AbortSignal
) => {
      return useCustomClient<ImageVotingsViewImageVotingEntryResponse>(
      {url: `/Api/ImageVotingEntries/${id}`, method: 'get', signal
    },
      );
    }
  

export const getGetApiImageVotingEntriesIdQueryKey = (id: number,) => [`/Api/ImageVotingEntries/${id}`] as const;
  

    
export const getGetApiImageVotingEntriesIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiImageVotingEntriesId>>, TError = ErrorType<void | ProblemDetails>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingEntriesId>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingEntriesId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiImageVotingEntriesIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiImageVotingEntriesId>>> = ({ signal }) => getApiImageVotingEntriesId(id, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetApiImageVotingEntriesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiImageVotingEntriesId>>>
export type GetApiImageVotingEntriesIdQueryError = ErrorType<void | ProblemDetails>

/**
 * @summary Get information about an image voting entry
 */
export const useGetApiImageVotingEntriesId = <TData = Awaited<ReturnType<typeof getApiImageVotingEntriesId>>, TError = ErrorType<void | ProblemDetails>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingEntriesId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiImageVotingEntriesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * Requires verified email; Requires one of the following permissions: ImageVotings.UpdateImageVotingEntry, ImageVotings.UpdateOwnImageVotingEntry; Requires the following features to be enabled: ImageVotings
 * @summary Update an image voting entry
 */
export const patchApiImageVotingEntriesId = (
    id: number,
    imageVotingsUpdateImageVotingEntryRequestBody: BodyType<ImageVotingsUpdateImageVotingEntryRequestBody>,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/ImageVotingEntries/${id}`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: imageVotingsUpdateImageVotingEntryRequestBody
    },
      );
    }
  


export const getPatchApiImageVotingEntriesIdMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiImageVotingEntriesId>>, TError,{id: number;data: BodyType<ImageVotingsUpdateImageVotingEntryRequestBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchApiImageVotingEntriesId>>, TError,{id: number;data: BodyType<ImageVotingsUpdateImageVotingEntryRequestBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiImageVotingEntriesId>>, {id: number;data: BodyType<ImageVotingsUpdateImageVotingEntryRequestBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  patchApiImageVotingEntriesId(id,data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PatchApiImageVotingEntriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiImageVotingEntriesId>>>
    export type PatchApiImageVotingEntriesIdMutationBody = BodyType<ImageVotingsUpdateImageVotingEntryRequestBody>
    export type PatchApiImageVotingEntriesIdMutationError = ErrorType<ProblemDetails>

    /**
 * @summary Update an image voting entry
 */
export const usePatchApiImageVotingEntriesId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiImageVotingEntriesId>>, TError,{id: number;data: BodyType<ImageVotingsUpdateImageVotingEntryRequestBody>}, TContext>, }
) => {
    
      const mutationOptions = getPatchApiImageVotingEntriesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Requires verified email; Requires one of the following permissions: ImageVotings.DeleteImageVotingEntry, ImageVotings.DeleteOwnImageVotingEntry; Requires the following features to be enabled: ImageVotings
 * @summary Delete an image voting entry
 */
export const deleteApiImageVotingEntriesId = (
    id: number,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/ImageVotingEntries/${id}`, method: 'delete'
    },
      );
    }
  


export const getDeleteApiImageVotingEntriesIdMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingEntriesId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingEntriesId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiImageVotingEntriesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiImageVotingEntriesId(id,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiImageVotingEntriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiImageVotingEntriesId>>>
    
    export type DeleteApiImageVotingEntriesIdMutationError = ErrorType<ProblemDetails>

    /**
 * @summary Delete an image voting entry
 */
export const useDeleteApiImageVotingEntriesId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingEntriesId>>, TError,{id: number}, TContext>, }
) => {
    
      const mutationOptions = getDeleteApiImageVotingEntriesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Requires verified email; Requires one of the following permissions: ImageVotings.IndexImageVotingEntries, ImageVotings.IndexActiveImageVotingEntries; Requires the following features to be enabled: ImageVotings
 * @summary Get a list of all image voting entries
 */
export const getApiImageVotingEntries = (
    params?: GetApiImageVotingEntriesParams,
 signal?: AbortSignal
) => {
      return useCustomClient<ImageVotingsIndexImageVotingEntriesResponse[]>(
      {url: `/Api/ImageVotingEntries`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiImageVotingEntriesQueryKey = (params?: GetApiImageVotingEntriesParams,) => [`/Api/ImageVotingEntries`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiImageVotingEntriesQueryOptions = <TData = Awaited<ReturnType<typeof getApiImageVotingEntries>>, TError = ErrorType<void>>(params?: GetApiImageVotingEntriesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingEntries>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingEntries>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiImageVotingEntriesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiImageVotingEntries>>> = ({ signal }) => getApiImageVotingEntries(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiImageVotingEntriesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiImageVotingEntries>>>
export type GetApiImageVotingEntriesQueryError = ErrorType<void>

/**
 * @summary Get a list of all image voting entries
 */
export const useGetApiImageVotingEntries = <TData = Awaited<ReturnType<typeof getApiImageVotingEntries>>, TError = ErrorType<void>>(
 params?: GetApiImageVotingEntriesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingEntries>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiImageVotingEntriesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * Requires verified email; Requires one of the following permissions: ImageVotings.ChooseImageVotingEntry, ImageVotings.CreateActiveImageVotingEntry; Requires the following features to be enabled: ImageVotings
 * @summary Create an image voting entry
 */
export const postApiImageVotingEntries = (
    imageVotingsCreateImageVotingEntryRequestBody: BodyType<ImageVotingsCreateImageVotingEntryRequestBody>,
 ) => {
      return useCustomClient<ImageVotingsCreateImageVotingEntryResponse>(
      {url: `/Api/ImageVotingEntries`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: imageVotingsCreateImageVotingEntryRequestBody
    },
      );
    }
  


export const getPostApiImageVotingEntriesMutationOptions = <TError = ErrorType<void | ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntries>>, TError,{data: BodyType<ImageVotingsCreateImageVotingEntryRequestBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntries>>, TError,{data: BodyType<ImageVotingsCreateImageVotingEntryRequestBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiImageVotingEntries>>, {data: BodyType<ImageVotingsCreateImageVotingEntryRequestBody>}> = (props) => {
          const {data} = props ?? {};

          return  postApiImageVotingEntries(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiImageVotingEntriesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiImageVotingEntries>>>
    export type PostApiImageVotingEntriesMutationBody = BodyType<ImageVotingsCreateImageVotingEntryRequestBody>
    export type PostApiImageVotingEntriesMutationError = ErrorType<void | ProblemDetails>

    /**
 * @summary Create an image voting entry
 */
export const usePostApiImageVotingEntries = <TError = ErrorType<void | ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntries>>, TError,{data: BodyType<ImageVotingsCreateImageVotingEntryRequestBody>}, TContext>, }
) => {
    
      const mutationOptions = getPostApiImageVotingEntriesMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Requires verified email; Requires one of the following permissions: ImageVotings.ChooseActiveImageVotingEntry, ImageVotings.ChooseImageVotingEntry; Requires the following features to be enabled: ImageVotings
 * @summary Choose an image voting entry (single choice image votings only)
 */
export const postApiImageVotingEntriesIdChoose = (
    id: number,
    imageVotingsChooseImageVotingEntryRequestBody: BodyType<ImageVotingsChooseImageVotingEntryRequestBody>,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/ImageVotingEntries/${id}/Choose`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: imageVotingsChooseImageVotingEntryRequestBody
    },
      );
    }
  


export const getPostApiImageVotingEntriesIdChooseMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntriesIdChoose>>, TError,{id: number;data: BodyType<ImageVotingsChooseImageVotingEntryRequestBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntriesIdChoose>>, TError,{id: number;data: BodyType<ImageVotingsChooseImageVotingEntryRequestBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiImageVotingEntriesIdChoose>>, {id: number;data: BodyType<ImageVotingsChooseImageVotingEntryRequestBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  postApiImageVotingEntriesIdChoose(id,data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiImageVotingEntriesIdChooseMutationResult = NonNullable<Awaited<ReturnType<typeof postApiImageVotingEntriesIdChoose>>>
    export type PostApiImageVotingEntriesIdChooseMutationBody = BodyType<ImageVotingsChooseImageVotingEntryRequestBody>
    export type PostApiImageVotingEntriesIdChooseMutationError = ErrorType<ProblemDetails>

    /**
 * @summary Choose an image voting entry (single choice image votings only)
 */
export const usePostApiImageVotingEntriesIdChoose = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntriesIdChoose>>, TError,{id: number;data: BodyType<ImageVotingsChooseImageVotingEntryRequestBody>}, TContext>, }
) => {
    
      const mutationOptions = getPostApiImageVotingEntriesIdChooseMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Requires verified email; Requires one of the following permissions: ImageVotings.UnchooseActiveImageVotingEntry, ImageVotings.UnchooseImageVotingEntry; Requires the following features to be enabled: ImageVotings
 * @summary Unchoose an image voting entry (single choice image votings only)
 */
export const postApiImageVotingEntriesIdUnchoose = (
    id: number,
    imageVotingsUnchooseImageVotingEntryRequestBody: BodyType<ImageVotingsUnchooseImageVotingEntryRequestBody>,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/ImageVotingEntries/${id}/Unchoose`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: imageVotingsUnchooseImageVotingEntryRequestBody
    },
      );
    }
  


export const getPostApiImageVotingEntriesIdUnchooseMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntriesIdUnchoose>>, TError,{id: number;data: BodyType<ImageVotingsUnchooseImageVotingEntryRequestBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntriesIdUnchoose>>, TError,{id: number;data: BodyType<ImageVotingsUnchooseImageVotingEntryRequestBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiImageVotingEntriesIdUnchoose>>, {id: number;data: BodyType<ImageVotingsUnchooseImageVotingEntryRequestBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  postApiImageVotingEntriesIdUnchoose(id,data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiImageVotingEntriesIdUnchooseMutationResult = NonNullable<Awaited<ReturnType<typeof postApiImageVotingEntriesIdUnchoose>>>
    export type PostApiImageVotingEntriesIdUnchooseMutationBody = BodyType<ImageVotingsUnchooseImageVotingEntryRequestBody>
    export type PostApiImageVotingEntriesIdUnchooseMutationError = ErrorType<ProblemDetails>

    /**
 * @summary Unchoose an image voting entry (single choice image votings only)
 */
export const usePostApiImageVotingEntriesIdUnchoose = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntriesIdUnchoose>>, TError,{id: number;data: BodyType<ImageVotingsUnchooseImageVotingEntryRequestBody>}, TContext>, }
) => {
    
      const mutationOptions = getPostApiImageVotingEntriesIdUnchooseMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Requires verified email; Requires one of the following permissions: ImageVotings.IndexOwnImageVotingEntryImages, ImageVotings.IndexImageVotingEntryImages; Requires the following features to be enabled: ImageVotings
 * @summary List all images of an image voting
 */
export const getApiImageVotingEntriesImageVotingIdImages = (
    imageVotingId: number,
    params?: GetApiImageVotingEntriesImageVotingIdImagesParams,
 signal?: AbortSignal
) => {
      return useCustomClient<ImageVotingsIndexImageVotingEntryImagesResponse[]>(
      {url: `/Api/ImageVotingEntries/${imageVotingId}/Images`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiImageVotingEntriesImageVotingIdImagesQueryKey = (imageVotingId: number,
    params?: GetApiImageVotingEntriesImageVotingIdImagesParams,) => [`/Api/ImageVotingEntries/${imageVotingId}/Images`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiImageVotingEntriesImageVotingIdImagesQueryOptions = <TData = Awaited<ReturnType<typeof getApiImageVotingEntriesImageVotingIdImages>>, TError = ErrorType<void | ProblemDetails>>(imageVotingId: number,
    params?: GetApiImageVotingEntriesImageVotingIdImagesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingEntriesImageVotingIdImages>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingEntriesImageVotingIdImages>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiImageVotingEntriesImageVotingIdImagesQueryKey(imageVotingId,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiImageVotingEntriesImageVotingIdImages>>> = ({ signal }) => getApiImageVotingEntriesImageVotingIdImages(imageVotingId,params, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(imageVotingId), ...queryOptions}}

export type GetApiImageVotingEntriesImageVotingIdImagesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiImageVotingEntriesImageVotingIdImages>>>
export type GetApiImageVotingEntriesImageVotingIdImagesQueryError = ErrorType<void | ProblemDetails>

/**
 * @summary List all images of an image voting
 */
export const useGetApiImageVotingEntriesImageVotingIdImages = <TData = Awaited<ReturnType<typeof getApiImageVotingEntriesImageVotingIdImages>>, TError = ErrorType<void | ProblemDetails>>(
 imageVotingId: number,
    params?: GetApiImageVotingEntriesImageVotingIdImagesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImageVotingEntriesImageVotingIdImages>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiImageVotingEntriesImageVotingIdImagesQueryOptions(imageVotingId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * Requires verified email; Requires one of the following permissions: ImageVotings.UploadActiveImageVotingEntryImage, ImageVotings.UploadImageVotingEntryImage; Requires the following features to be enabled: ImageVotings
 * @summary Upload an image to be used in an image voting entry
 */
export const postApiImageVotingEntriesImageVotingIdImages = (
    imageVotingId: number,
    postApiImageVotingEntriesImageVotingIdImagesBody: BodyType<PostApiImageVotingEntriesImageVotingIdImagesBody>,
 ) => {const formData = new FormData();
if(postApiImageVotingEntriesImageVotingIdImagesBody.File !== undefined) {
 formData.append('File', postApiImageVotingEntriesImageVotingIdImagesBody.File)
 }

      return useCustomClient<ImageVotingsUploadImageVotingEntryImageResponse>(
      {url: `/Api/ImageVotingEntries/${imageVotingId}/Images`, method: 'post',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      );
    }
  


export const getPostApiImageVotingEntriesImageVotingIdImagesMutationOptions = <TError = ErrorType<void | ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntriesImageVotingIdImages>>, TError,{imageVotingId: number;data: BodyType<PostApiImageVotingEntriesImageVotingIdImagesBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntriesImageVotingIdImages>>, TError,{imageVotingId: number;data: BodyType<PostApiImageVotingEntriesImageVotingIdImagesBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiImageVotingEntriesImageVotingIdImages>>, {imageVotingId: number;data: BodyType<PostApiImageVotingEntriesImageVotingIdImagesBody>}> = (props) => {
          const {imageVotingId,data} = props ?? {};

          return  postApiImageVotingEntriesImageVotingIdImages(imageVotingId,data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiImageVotingEntriesImageVotingIdImagesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiImageVotingEntriesImageVotingIdImages>>>
    export type PostApiImageVotingEntriesImageVotingIdImagesMutationBody = BodyType<PostApiImageVotingEntriesImageVotingIdImagesBody>
    export type PostApiImageVotingEntriesImageVotingIdImagesMutationError = ErrorType<void | ProblemDetails>

    /**
 * @summary Upload an image to be used in an image voting entry
 */
export const usePostApiImageVotingEntriesImageVotingIdImages = <TError = ErrorType<void | ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImageVotingEntriesImageVotingIdImages>>, TError,{imageVotingId: number;data: BodyType<PostApiImageVotingEntriesImageVotingIdImagesBody>}, TContext>, }
) => {
    
      const mutationOptions = getPostApiImageVotingEntriesImageVotingIdImagesMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Requires verified email; Requires one of the following permissions: ImageVotings.DeleteOwnImageVotingEntryImage, ImageVotings.DeleteImageVotingEntryImage; Requires the following features to be enabled: ImageVotings
 * @summary Delete an image meant for an image voting entry
 */
export const deleteApiImageVotingEntriesImagesId = (
    id: number,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/ImageVotingEntries/Images/${id}`, method: 'delete'
    },
      );
    }
  


export const getDeleteApiImageVotingEntriesImagesIdMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingEntriesImagesId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingEntriesImagesId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiImageVotingEntriesImagesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiImageVotingEntriesImagesId(id,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiImageVotingEntriesImagesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiImageVotingEntriesImagesId>>>
    
    export type DeleteApiImageVotingEntriesImagesIdMutationError = ErrorType<ProblemDetails>

    /**
 * @summary Delete an image meant for an image voting entry
 */
export const useDeleteApiImageVotingEntriesImagesId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImageVotingEntriesImagesId>>, TError,{id: number}, TContext>, }
) => {
    
      const mutationOptions = getDeleteApiImageVotingEntriesImagesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    