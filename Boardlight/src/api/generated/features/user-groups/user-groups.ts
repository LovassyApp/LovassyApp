/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Blueboard
 * OpenAPI spec version: v4.0.0
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  AuthIndexUserGroupsResponse,
  GetApiUserGroupsParams,
  AuthCreateUserGroupResponse,
  AuthCreateUserGroupRequestBody,
  AuthViewUserGroupResponse,
  ProblemDetails,
  AuthUpdateUserGroupRequestBody
} from '../../models'
import { useCustomClient } from '../../../customClient';
import type { ErrorType, BodyType } from '../../../customClient';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


/**
 * <b>Requires verified email</b><br><b>Requires one of the following permissions</b>: Auth.IndexUserGroups
 */
export const getApiUserGroups = (
    params?: GetApiUserGroupsParams,
 signal?: AbortSignal
) => {
      return useCustomClient<AuthIndexUserGroupsResponse[]>(
      {url: `/Api/UserGroups`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiUserGroupsQueryKey = (params?: GetApiUserGroupsParams,) => [`/Api/UserGroups`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiUserGroupsQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserGroups>>, TError = ErrorType<void>>(params?: GetApiUserGroupsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserGroups>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiUserGroups>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserGroupsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserGroups>>> = ({ signal }) => getApiUserGroups(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiUserGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserGroups>>>
export type GetApiUserGroupsQueryError = ErrorType<void>

export const useGetApiUserGroups = <TData = Awaited<ReturnType<typeof getApiUserGroups>>, TError = ErrorType<void>>(
 params?: GetApiUserGroupsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserGroups>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiUserGroupsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * <b>Requires verified email</b><br><b>Requires one of the following permissions</b>: Auth.CreateUserGroup
 */
export const postApiUserGroups = (
    authCreateUserGroupRequestBody: BodyType<AuthCreateUserGroupRequestBody>,
 ) => {
      return useCustomClient<AuthCreateUserGroupResponse>(
      {url: `/Api/UserGroups`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: authCreateUserGroupRequestBody
    },
      );
    }
  


export const getPostApiUserGroupsMutationOptions = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserGroups>>, TError,{data: BodyType<AuthCreateUserGroupRequestBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiUserGroups>>, TError,{data: BodyType<AuthCreateUserGroupRequestBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUserGroups>>, {data: BodyType<AuthCreateUserGroupRequestBody>}> = (props) => {
          const {data} = props ?? {};

          return  postApiUserGroups(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiUserGroupsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUserGroups>>>
    export type PostApiUserGroupsMutationBody = BodyType<AuthCreateUserGroupRequestBody>
    export type PostApiUserGroupsMutationError = ErrorType<void>

    export const usePostApiUserGroups = <TError = ErrorType<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserGroups>>, TError,{data: BodyType<AuthCreateUserGroupRequestBody>}, TContext>, }
) => {
    
      const mutationOptions = getPostApiUserGroupsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * <b>Requires verified email</b><br><b>Requires one of the following permissions</b>: Auth.ViewUserGroup
 */
export const getApiUserGroupsId = (
    id: number,
 signal?: AbortSignal
) => {
      return useCustomClient<AuthViewUserGroupResponse>(
      {url: `/Api/UserGroups/${id}`, method: 'get', signal
    },
      );
    }
  

export const getGetApiUserGroupsIdQueryKey = (id: number,) => [`/Api/UserGroups/${id}`] as const;
  

    
export const getGetApiUserGroupsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiUserGroupsId>>, TError = ErrorType<void | ProblemDetails>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserGroupsId>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiUserGroupsId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUserGroupsIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserGroupsId>>> = ({ signal }) => getApiUserGroupsId(id, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetApiUserGroupsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserGroupsId>>>
export type GetApiUserGroupsIdQueryError = ErrorType<void | ProblemDetails>

export const useGetApiUserGroupsId = <TData = Awaited<ReturnType<typeof getApiUserGroupsId>>, TError = ErrorType<void | ProblemDetails>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserGroupsId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiUserGroupsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * <b>Requires verified email</b><br><b>Requires one of the following permissions</b>: Auth.UpdateUserGroup
 */
export const patchApiUserGroupsId = (
    id: number,
    authUpdateUserGroupRequestBody: BodyType<AuthUpdateUserGroupRequestBody>,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/UserGroups/${id}`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: authUpdateUserGroupRequestBody
    },
      );
    }
  


export const getPatchApiUserGroupsIdMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUserGroupsId>>, TError,{id: number;data: BodyType<AuthUpdateUserGroupRequestBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchApiUserGroupsId>>, TError,{id: number;data: BodyType<AuthUpdateUserGroupRequestBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiUserGroupsId>>, {id: number;data: BodyType<AuthUpdateUserGroupRequestBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  patchApiUserGroupsId(id,data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PatchApiUserGroupsIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiUserGroupsId>>>
    export type PatchApiUserGroupsIdMutationBody = BodyType<AuthUpdateUserGroupRequestBody>
    export type PatchApiUserGroupsIdMutationError = ErrorType<ProblemDetails>

    export const usePatchApiUserGroupsId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiUserGroupsId>>, TError,{id: number;data: BodyType<AuthUpdateUserGroupRequestBody>}, TContext>, }
) => {
    
      const mutationOptions = getPatchApiUserGroupsIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * <b>Requires verified email</b><br><b>Requires one of the following permissions</b>: Auth.DeleteUserGroup
 */
export const deleteApiUserGroupsId = (
    id: number,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/UserGroups/${id}`, method: 'delete'
    },
      );
    }
  


export const getDeleteApiUserGroupsIdMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUserGroupsId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiUserGroupsId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiUserGroupsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiUserGroupsId(id,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiUserGroupsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiUserGroupsId>>>
    
    export type DeleteApiUserGroupsIdMutationError = ErrorType<ProblemDetails>

    export const useDeleteApiUserGroupsId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUserGroupsId>>, TError,{id: number}, TContext>, }
) => {
    
      const mutationOptions = getDeleteApiUserGroupsIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    