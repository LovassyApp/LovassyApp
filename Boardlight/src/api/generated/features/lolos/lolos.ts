/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Blueboard
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  ShopIndexOwnLolosResponse,
  GetApiLolosOwnParams,
  ShopIndexLolosResponse,
  GetApiLolosParams
} from '../../models'
import { useCustomClient } from '../../../customClient';
import type { ErrorType } from '../../../customClient';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


/**
 * Requires verified email; Requires one of the following permissions: Shop.IndexOwnLolos; Requires the following features to be enabled: Shop
 * @summary Get a list of the user's lolo coins
 */
export const getApiLolosOwn = (
    params?: GetApiLolosOwnParams,
 signal?: AbortSignal
) => {
      return useCustomClient<ShopIndexOwnLolosResponse>(
      {url: `/Api/Lolos/Own`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiLolosOwnQueryKey = (params?: GetApiLolosOwnParams,) => [`/Api/Lolos/Own`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiLolosOwnQueryOptions = <TData = Awaited<ReturnType<typeof getApiLolosOwn>>, TError = ErrorType<void>>(params?: GetApiLolosOwnParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiLolosOwn>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiLolosOwn>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiLolosOwnQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLolosOwn>>> = ({ signal }) => getApiLolosOwn(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiLolosOwnQueryResult = NonNullable<Awaited<ReturnType<typeof getApiLolosOwn>>>
export type GetApiLolosOwnQueryError = ErrorType<void>

/**
 * @summary Get a list of the user's lolo coins
 */
export const useGetApiLolosOwn = <TData = Awaited<ReturnType<typeof getApiLolosOwn>>, TError = ErrorType<void>>(
 params?: GetApiLolosOwnParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiLolosOwn>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiLolosOwnQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * Requires verified email; Requires one of the following permissions: Shop.IndexLolos; Requires the following features to be enabled: Shop
 * @summary Get a list of all lolo coins
 */
export const getApiLolos = (
    params?: GetApiLolosParams,
 signal?: AbortSignal
) => {
      return useCustomClient<ShopIndexLolosResponse[]>(
      {url: `/Api/Lolos`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiLolosQueryKey = (params?: GetApiLolosParams,) => [`/Api/Lolos`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiLolosQueryOptions = <TData = Awaited<ReturnType<typeof getApiLolos>>, TError = ErrorType<void>>(params?: GetApiLolosParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiLolos>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiLolos>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiLolosQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiLolos>>> = ({ signal }) => getApiLolos(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiLolosQueryResult = NonNullable<Awaited<ReturnType<typeof getApiLolos>>>
export type GetApiLolosQueryError = ErrorType<void>

/**
 * @summary Get a list of all lolo coins
 */
export const useGetApiLolos = <TData = Awaited<ReturnType<typeof getApiLolos>>, TError = ErrorType<void>>(
 params?: GetApiLolosParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiLolos>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiLolosQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

