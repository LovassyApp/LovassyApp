/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Blueboard
 * OpenAPI spec version: v4.0.0
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  ImportIndexImportKeysResponse,
  GetApiImportKeysParams,
  ImportCreateImportKeyResponse,
  ProblemDetails,
  ImportCreateImportKeyRequestBody,
  ImportViewImportKeyResponse,
  ImportUpdateImportKeyRequestBody
} from '../../models'
import { useCustomClient } from '../../../customClient';
import type { ErrorType, BodyType } from '../../../customClient';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


/**
 * Requires verified email; Requires one of the following permissions: Import.IndexImportKeys; Requires the following features to be enabled: Import
 * @summary Get a list of all import keys
 */
export const getApiImportKeys = (
    params?: GetApiImportKeysParams,
 signal?: AbortSignal
) => {
      return useCustomClient<ImportIndexImportKeysResponse[]>(
      {url: `/Api/ImportKeys`, method: 'get',
        params, signal
    },
      );
    }
  

export const getGetApiImportKeysQueryKey = (params?: GetApiImportKeysParams,) => [`/Api/ImportKeys`, ...(params ? [params]: [])] as const;
  

    
export const getGetApiImportKeysQueryOptions = <TData = Awaited<ReturnType<typeof getApiImportKeys>>, TError = ErrorType<void>>(params?: GetApiImportKeysParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImportKeys>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiImportKeys>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiImportKeysQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiImportKeys>>> = ({ signal }) => getApiImportKeys(params, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetApiImportKeysQueryResult = NonNullable<Awaited<ReturnType<typeof getApiImportKeys>>>
export type GetApiImportKeysQueryError = ErrorType<void>

/**
 * @summary Get a list of all import keys
 */
export const useGetApiImportKeys = <TData = Awaited<ReturnType<typeof getApiImportKeys>>, TError = ErrorType<void>>(
 params?: GetApiImportKeysParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImportKeys>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiImportKeysQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * Requires verified email; Requires one of the following permissions: Import.CreateImportKey; Requires the following features to be enabled: Import
 * @summary Create a new import key
 */
export const postApiImportKeys = (
    importCreateImportKeyRequestBody: BodyType<ImportCreateImportKeyRequestBody>,
 ) => {
      return useCustomClient<ImportCreateImportKeyResponse>(
      {url: `/Api/ImportKeys`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: importCreateImportKeyRequestBody
    },
      );
    }
  


export const getPostApiImportKeysMutationOptions = <TError = ErrorType<ProblemDetails | void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImportKeys>>, TError,{data: BodyType<ImportCreateImportKeyRequestBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiImportKeys>>, TError,{data: BodyType<ImportCreateImportKeyRequestBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiImportKeys>>, {data: BodyType<ImportCreateImportKeyRequestBody>}> = (props) => {
          const {data} = props ?? {};

          return  postApiImportKeys(data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostApiImportKeysMutationResult = NonNullable<Awaited<ReturnType<typeof postApiImportKeys>>>
    export type PostApiImportKeysMutationBody = BodyType<ImportCreateImportKeyRequestBody>
    export type PostApiImportKeysMutationError = ErrorType<ProblemDetails | void>

    /**
 * @summary Create a new import key
 */
export const usePostApiImportKeys = <TError = ErrorType<ProblemDetails | void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiImportKeys>>, TError,{data: BodyType<ImportCreateImportKeyRequestBody>}, TContext>, }
) => {
    
      const mutationOptions = getPostApiImportKeysMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Requires verified email; Requires one of the following permissions: Import.ViewImportKey; Requires the following features to be enabled: Import
 * @summary Get information about an import key
 */
export const getApiImportKeysId = (
    id: number,
 signal?: AbortSignal
) => {
      return useCustomClient<ImportViewImportKeyResponse>(
      {url: `/Api/ImportKeys/${id}`, method: 'get', signal
    },
      );
    }
  

export const getGetApiImportKeysIdQueryKey = (id: number,) => [`/Api/ImportKeys/${id}`] as const;
  

    
export const getGetApiImportKeysIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiImportKeysId>>, TError = ErrorType<void | ProblemDetails>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImportKeysId>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getApiImportKeysId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiImportKeysIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiImportKeysId>>> = ({ signal }) => getApiImportKeysId(id, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetApiImportKeysIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiImportKeysId>>>
export type GetApiImportKeysIdQueryError = ErrorType<void | ProblemDetails>

/**
 * @summary Get information about an import key
 */
export const useGetApiImportKeysId = <TData = Awaited<ReturnType<typeof getApiImportKeysId>>, TError = ErrorType<void | ProblemDetails>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiImportKeysId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiImportKeysIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * Requires verified email; Requires one of the following permissions: Import.UpdateImportKey; Requires the following features to be enabled: Import
 * @summary Update an import key
 */
export const patchApiImportKeysId = (
    id: number,
    importUpdateImportKeyRequestBody: BodyType<ImportUpdateImportKeyRequestBody>,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/ImportKeys/${id}`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: importUpdateImportKeyRequestBody
    },
      );
    }
  


export const getPatchApiImportKeysIdMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiImportKeysId>>, TError,{id: number;data: BodyType<ImportUpdateImportKeyRequestBody>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchApiImportKeysId>>, TError,{id: number;data: BodyType<ImportUpdateImportKeyRequestBody>}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiImportKeysId>>, {id: number;data: BodyType<ImportUpdateImportKeyRequestBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  patchApiImportKeysId(id,data,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PatchApiImportKeysIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiImportKeysId>>>
    export type PatchApiImportKeysIdMutationBody = BodyType<ImportUpdateImportKeyRequestBody>
    export type PatchApiImportKeysIdMutationError = ErrorType<ProblemDetails>

    /**
 * @summary Update an import key
 */
export const usePatchApiImportKeysId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiImportKeysId>>, TError,{id: number;data: BodyType<ImportUpdateImportKeyRequestBody>}, TContext>, }
) => {
    
      const mutationOptions = getPatchApiImportKeysIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * Requires verified email; Requires one of the following permissions: Import.DeleteImportKey; Requires the following features to be enabled: Import
 * @summary Delete an import key
 */
export const deleteApiImportKeysId = (
    id: number,
 ) => {
      return useCustomClient<void>(
      {url: `/Api/ImportKeys/${id}`, method: 'delete'
    },
      );
    }
  


export const getDeleteApiImportKeysIdMutationOptions = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImportKeysId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiImportKeysId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiImportKeysId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiImportKeysId(id,)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiImportKeysIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiImportKeysId>>>
    
    export type DeleteApiImportKeysIdMutationError = ErrorType<ProblemDetails>

    /**
 * @summary Delete an import key
 */
export const useDeleteApiImportKeysId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiImportKeysId>>, TError,{id: number}, TContext>, }
) => {
    
      const mutationOptions = getDeleteApiImportKeysIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    